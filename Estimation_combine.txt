Estimation_combine




import json
import boto3
import uuid
from decimal import Decimal
# import simplejson as json

client_dynamodb= boto3.client('dynamodb')
dynamodb = boto3.resource('dynamodb')
counter_table_name = 'CounterTable'
table_name = 'Estimation_Combine'
table_name2='RFP'

counter_table = dynamodb.Table(counter_table_name)
table = dynamodb.Table(table_name)
def filterByRfp(table, lastUpdated_rfp_value):

    scan_params = {

          'TableName': table_name,

          'FilterExpression': '#attribute_name = :attribute_value',

          'ExpressionAttributeNames' : {

                '#attribute_name' :'rfp_no'

            },

          'ExpressionAttributeValues': {

              ':attribute_value': {'N': str(lastUpdated_rfp_value)}

          }

    }

    

    return client_dynamodb.scan(**scan_params)


def postRows(event,context):
    try:
        counter_response = counter_table.get_item(Key={'rfp_no': 100})
        counter_data = counter_response.get('Item', {})
        additional_column_rfp_value = counter_data.get('counter_value', None) 
       
        requestBody=json.loads(event['body'])
        RfpNum = requestBody.get('RfpNum')
        
        for item in requestBody["listdata"]:
            unique_id=str(uuid.uuid4())
            # item['rfp_no'] = additional_column_rfp_value
            item['rfp_no']=RfpNum
            item['id'] =unique_id
            #  item = json.loads(json.dumps(item), parse_float=Decimal)
            table.put_item(Item=item)      
        response = {
                    'statusCode': 200,
                    'body': json.dumps({'success':True}), 
                    'headers': {
                        'ContentType': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                        }
            }       
    except Exception as e:
      response = {
          "statusCode": 500,
          "body": json.dumps(str(e))
      }
    return response
def putEstimatedHours(event):
    try:
        rfp = event["queryStringParameters"]["rfp_no"]
        estimated_hrs = event["queryStringParameters"]["sum"]
        
        response = client_dynamodb.update_item(
            TableName= table_name2,
            Key={'rfp_no': {'N': rfp}},
            UpdateExpression = 'SET #newAttr = :newValue',
            ExpressionAttributeNames={
              '#newAttr': 'estimated_hours'
            },
            ExpressionAttributeValues={
              ':newValue': {'N':str(estimated_hrs)}
            },
            # estimated_hours :value',
            # ExpressionAttributeValues={':value': {'N':estimated_hrs}},
            ReturnValues='ALL_NEW'
        )
        response = {
                'statusCode': 200,
                'body': json.dumps("update successful"), 
                'headers': {
                    'ContentType': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                    }
        }       
    # except ClientError as e:
    except Exception as e:
      response = {
          "statusCode": 500,
          "body": json.dumps(str(e)),
          'headers': {
                    'ContentType': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                    }
      }
    return response
def getData(event,table_name):

    try:

        rfp=event["queryStringParameters"]["RfpNum"]

        response= filterByRfp(table_name,rfp) 

        items = response.get('Items', [])

        # sorted_items=sorted(items,key=lambda x: x['id']['N'])

        for item in items: 
#         #   if 'rfp_no'in item:
              del item['rfp_no'] 
            #   del item['id']

        

        response3= { 

          'statusCode': 200,

          'body': json.dumps(items),

          'headers': {

                        'ContentType': 'application/json',

                        'Access-Control-Allow-Origin': '*'

                    } 

            }

    except Exception as e:

        response3= { 

          'statusCode': 500,

          'body': json.dumps(str(e)),

          'headers': {

                        'ContentType': 'application/json',

                        'Access-Control-Allow-Origin': '*'

                    } 

      }

    return response3 


def delete(event, context):
      payload = json.loads(event['body'])
      item_id = payload.get('id')
      sort_key_value = payload.get('RfpNum')
   
      try:
          
          
           response = table.scan(
               FilterExpression='#primary_key = :id_value AND #sortkey = :sortkey_value',
           
               ExpressionAttributeNames={
                '#primary_key': 'id',
                '#sortkey': 'rfp_no'
                  },
               ExpressionAttributeValues={
                 ':id_value': item_id,
                 ':sortkey_value': sort_key_value
                  }
               )
               
           items = response.get('Items', []) 
           a="abc"
           
           for item in items:
               if(
                  item.get('id')==item_id and
                  item.get('rfp_no')==sort_key_value
                  ):
                #   id={
                #       'id':item['id']
                #   }
                  table.delete_item(
                       Key={
                           'id':item['id'],
                           'rfp_no': item['rfp_no']
                       }
                    ) 
                  a="deleted"
                  
           if(a=="deleted"):      
               return {
                      'statusCode': 200,
                      'body': json.dumps('Item deleted'),
                       'headers': {
                                'ContentType': 'application/json',
                                'Access-Control-Allow-Origin': '*'
                                }
                   }
      except Exception as e:
          print(e)
          return {
              'statusCode': 500,
              'body': json.dumps(str(e)),
              'headers': {
                        'ContentType': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                        }
          }
          return response

    
def lambda_handler(event, context):
    hcontext=event["httpMethod"]
    if(hcontext=="POST"):
        return postRows(event,context)
    elif(hcontext=="PUT"):
        return putEstimatedHours(event)
    elif(hcontext=='GET'):
        return getData(event,table_name)
    elif(hcontext=='DELETE'):
        return delete(event,context)
    
