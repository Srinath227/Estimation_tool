data_delete1



import boto3
import json
from itertools import zip_longest
from boto3.dynamodb.conditions import Key

dynamodbTableName = 'Estimation_data'
client_dynamodb= boto3.client('dynamodb')
dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table(dynamodbTableName)
counter_table_name = 'CounterTable'
counter_table = dynamodb.Table(counter_table_name)
def genPrimeKey(counter_table_name):

    response = client_dynamodb.update_item(

                        TableName= counter_table_name,

                        Key={'rfp_no':{'N': '400'}}, #counter_value=200

                        UpdateExpression='ADD counter_value:inc',

                        ExpressionAttributeValues={':inc': {'N':'1'}},

                        ReturnValues='UPDATED_NEW'

                    )

    # Get the incremented value

    return response['Attributes']['counter_value']['N']
def delete(event,context):
      payload = json.loads(event['body'])
      sort_key_value = payload.get('RfpNum')
      Components=payload.get('Components')
      
   
      try:
          
          
           response = table.scan(
               FilterExpression=' #sortkey = :sortkey_value AND #component =:comp',
           
               ExpressionAttributeNames={
               
                '#sortkey': 'rfp_no',
                '#component':'Components',
                # '#primary_key': 'id',
    
                  },
               ExpressionAttributeValues={
                 
                 ':sortkey_value': sort_key_value,
                 ':comp':Components,
                 
                  }
               )
               
           items = response.get('Items', []) 
           a="abc"
           
           for item in items:
               if  item.get('rfp_no')==sort_key_value and item.get('Components')==Components:
               
                  table.delete_item(
                       Key={
                           'id':item['id'],
                           'rfp_no': item['rfp_no'],
                         
                       }
                    ) 
                  a="deleted"
                  
           if(a=="deleted"):      
               return {
                      'statusCode': 200,
                      'body': json.dumps({'success':True}),
                       'headers': {
                                'ContentType': 'application/json',
                                'Access-Control-Allow-Origin': '*',
                                'Access-Control-Allow-Header': '*',
                                'Access-Control-Allow-Method': '*'
                                }
                }
      except Exception as e:
          print(e)
          return {
              'statusCode': 500,
              'body': json.dumps(str(e)),
              'headers': {
                        'ContentType': 'application/json',
                        'Access-Control-Allow-Origin': '*',
                         'Access-Control-Allow-Header': '*',
                        'Access-Control-Allow-Method': '*'
                        }
          }
          return response
          
def dataupdate(event,context):
    try:
        counter_response = counter_table.get_item(Key={'rfp_no': 100})
        counter_data = counter_response.get('Item', {})
        additional_column_rfp_value = counter_data.get('counter_value', None) 
       
        requestBody=json.loads(event['body'])
        RfpNum = requestBody.get('RfpNum')
        
        for item in requestBody["listdata"]:
            auto_incremented_id_value= genPrimeKey(counter_table_name)
            # item['rfp_no'] = additional_column_rfp_value
            item['rfp_no']=RfpNum
            item['id'] =int(auto_incremented_id_value)
            #  item = json.loads(json.dumps(item), parse_float=Decimal)
            table.update_item(Item=item)      
        response = {
                    'statusCode': 200,
                    'body': json.dumps({'success':True}), 
                    'headers': {
                        'ContentType': 'application/json',
                        'Access-Control-Allow-Origin': '*',
                        'Access-Control-Allow-Header': '*',
                        'Access-Control-Allow-Method': '*'
                        }
            }       
    except Exception as e:
      response = {
          "statusCode": 500,
          "body": json.dumps(str(e))
      }
    return response
def subupdate(event):
# yuvarani   
    try:
        reqbody=json.loads(event['body'])
        rfp= reqbody.get('RfpNum')
        Comp=reqbody.get('Components')
        newcomp=reqbody.get('newComponent')
        list1 = reqbody.get('subComponents', [])
        list2 = reqbody.get('newsubComponents', [])
        l = []
        uncommon_l1 = []
        uncommon_l2=[]
        # fil by rfp
        response = table.scan(
        FilterExpression='rfp_no = :val',
        ExpressionAttributeValues={
           ':val': rfp
            
        })
        items = response['Items']
        # Common elements btw l1 & l2
        l = list(set(reqbody.get('subComponents', [])).intersection(reqbody.get('newsubComponents', []))) 
        # Elements in list1 but not in list2
        for value in list1:
           if value not in list2:
               uncommon_l1.append(value)
        # Elements in list2 but not in list1
        for value in list2: 
           if value not in list1:
               uncommon_l2.append(value)
        
        # Delete rows of uncommon elements in list1  
        for item in items:
            for subC1 in uncommon_l1:
               if item['subComponents'] == subC1:
                  table.delete_item(
                       Key={
                           'id':item.get('id'),
                           'rfp_no': item.get('rfp_no')
                       }
                    )
        # Update component for common elements in list1
            for s1 in l:
                if 'Components' in item and item['Components'] == Comp and  'subComponents' in item and item['subComponents'] == s1:
                    response = table.update_item(
                                  Key={
                                      'id': item['id'],
                                      'rfp_no': rfp
                                  },
                                  UpdateExpression='SET Components = :val',
                                  ExpressionAttributeValues={
                                      ':val': newcomp
                                  },
                                  ReturnValues='UPDATED_NEW'
                                )
        # Create new row for uncommon elements in list2
        for subC2 in uncommon_l2:
            auto_incremented_id_value= genPrimeKey(counter_table_name)
            new_item = {
              'id': int(auto_incremented_id_value),
              'rfp_no': rfp,
              'Components': newcomp,
              'subComponents': subC2
            }
            table.put_item(Item=new_item)
        # for subComponent,newsubComponent in  zip_longest(reqbody.get('subComponents', []),reqbody.get('newsubComponents', [])):
             
            # for item in items:
            #     if 'Components' in item and item['Components'] == Comp and  'subComponents' in item and item['subComponents'] == subComponent:
            #         response = table.update_item(
            #               Key={
            #                   'id': item['id'],
            #                   'rfp_no': rfp
            #               },
            #               UpdateExpression='SET Components = :val, subComponents = :subComp',
            #               ExpressionAttributeValues={
            #                   ':val': newcomp,
            #                   ':subComp': newsubComponent
            #               },
            #               ReturnValues='UPDATED_NEW'
            #           )
            #         break
            # if subComponent is None:
            #     auto_incremented_id_value= genPrimeKey(counter_table_name)
            #         new_item = {
            #           'id': int(auto_incremented_id_value),
            #           'rfp_no': rfp,
            #           'Components': newcomp,
            #           'subComponents': newsubComponent
            #         }
            #         table.put_item(Item=new_item)
                    
                # elif  'subComponents' in item and subComponent is None:
                #     auto_incremented_id_value= genPrimeKey(counter_table_name)
                #     new_item = {
                #       'id': int(auto_incremented_id_value),
                #       'rfp_no': rfp,
                #       'Components': newcomp,
                #       'subComponents': newsubComponent
                #     }
                #     table.put_item(Item=new_item)
                #     break
                    # response= {
                    # 'statusCode': 200,
                    # 'body': new_item, 
                    # 'headers': {
                    #     'ContentType': 'application/json',
                    #     'Access-Control-Allow-Origin': '*',
                    #     'Access-Control-Allow-Method':'*'
                    # }
                        
                    # }
                # l.append(newsubComponent) 
            # continue
        return{
            'statusCode': 200,
            'body': json.dumps({"success":True}), 
            'headers': {
                        'ContentType': 'application/json',
                        'Access-Control-Allow-Origin': '*',
                        'Access-Control-Allow-Method': '*'
                        }
          }
    except Exception as e:
        return{
            "statusCode": 500,
            "body": json.dumps(str(e)),
            "headers": {
                        'ContentType': 'application/json',
                        'Access-Control-Allow-Origin': '*',
                        'Access-Control-Allow-Method': '*'
           }
      }
    return response

 

          
def lambda_handler(event, context):
    hcontext=event['httpMethod']
    

    if(hcontext=='DELETE'):
        return delete(event,context)
    elif(hcontext=='POST'):
        return dataupdate(event,context)
    elif(hcontext=='PUT'):
        return subupdate(event)